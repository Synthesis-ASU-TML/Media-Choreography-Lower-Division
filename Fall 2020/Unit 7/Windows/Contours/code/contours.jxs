<jittershader name="default">
	<description> Default Slab </description>
	<param name="scale" type="float" default="1.0" />
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<param name="invert_y" type="float" default="0.0" />
	<language name="glsl" version="1.0">
		<bind param="scale" program="fp" />
		<bind param="tex0" program="fp" />		
		<bind param="tex1" program="fp" />
		<bind param="invert_y" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord;
varying vec2 texdim;
void main (void)
{
    gl_Position = ftransform();
    texcoord    = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	texdim 		= vec2(abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));
}
]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[
varying vec2 texcoord;
varying vec2 texdim;
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;
uniform float scale;
uniform float invert_y;


//quick 2D smooth noise function based on function from Inigo Quilez
float noise2D(vec2 p) {
	vec2 i = floor(p); p -= i; p *= p*(3.0 - p*2.0);  
    
	return dot(mat2(fract(sin(vec4(0, 1, 113, 114) + dot(i, vec2(1, 113)))*43758.5453))*
                vec2(1.0 - p.y, p.y), vec2(1.0 - p.x, p.x) );
}

//vec2 to float hash
float hash221(vec2 p) {
	return fract(sin(dot(p, vec2(41.0, 289.0))) * 45758.5453);
}

float createHatchPattern(vec2 p, float min_res) {
	
	p *= min_res / 16.0;
	
	//make the hatching lines look semi-random
	float h = clamp(sin((p.x - p.y)*3.14159*200.0)*2.0 + 0.5, 0.0, 1.0);
	
	float rndH = hash221(floor(p * 6.0) + 0.73);
	h = (rndH > 0.66) ? rndH : h;
	
	return h;
}

//get highlight layer for pixels facing the directional light on the upper side of
//a contour level change
float getHighlight(vec2 uv, float height) {
	
	//get sample locations
	vec2 samp1 = uv - vec2(2.0);
	vec2 samp2 = uv - vec2(3.0);
	
	float diff = (height - texture2DRect(tex0, samp1).r) > 0.0 ? 2.25 : 0.0;
	diff = (height - texture2DRect(tex0, samp2).r) > 0.0 ? ((diff != 1.0) ? 2.25 : diff) : diff;
	
	return max(diff, 1.0);
}

//get the shadow layer	
float getShadow(vec2 uv, float height) {
	
	//get sample location
	vec2 samp = uv - vec2(5.0);
		
	return (height - texture2DRect(tex0, samp).r) < 0.0 ? 0.5 : 1.0;
}

//get the outline layer (pixel on either side of a contour level change.)
float getLayerOutline(vec2 uv, float height) {
	
	vec2 sampUR = uv + vec2(1.0, -1.0);
	vec2 sampLR = uv + vec2(1.0, 1.0);
	vec2 sampUL = uv + vec2(-1.0, -1.0);
	vec2 sampLL = uv + vec2(-1.0, 1.0);
	
	float outline = 1.0;
	outline = (height != texture2DRect(tex0, sampUR).r) ? 0.0 : outline;
	outline = (height != texture2DRect(tex0, sampLR).r) ? 0.0 : outline;
	outline = (height != texture2DRect(tex0, sampUL).r) ? 0.0 : outline;
	outline = (height != texture2DRect(tex0, sampLL).r) ? 0.0 : outline;
	
	return outline;
}
	
void main(void) 
{
	//scale actual screen coordinates to keep the effect sharper
	float min_res = min(texdim.y, 700.0);
	vec2 uv = (texcoord.xy - texdim.xy * 5.0) / min_res;
	
	vec2 p = uv;
	
	// resolution smoothing factor
	//float smooth_fac = 1.0 / texdim.y;
	
	//get layer value from red channel of input texture 0
	float layer = texture2DRect(tex0, texcoord).r;
	
	//calculate hatch patterning
	float hatch = createHatchPattern(p + sin(vec2(41.0, 289.0) * ((layer / 0.2) + 1.0)), min_res);
	
	//get the base color for the layer
	vec3 layer_col = vec3(1.0) * (1.0 - 0.75 / (1.0 + layer * layer * 2.0));

	float col_samp_y = (invert_y == 1.0)? texdim.y - texcoord.y : texcoord.y;

	//incorporate original color from input 1
	vec3 tex_in = texture2DRect(tex1, vec2(texcoord.x, col_samp_y) + hash221(vec2(layer, (layer / 0.2)))).rgb;
	tex_in *= tex_in;
	//keep the layer color in the bounds of [0,1]
	layer_col = min(layer_col * tex_in * 3.0, 1.0);
	
	//calculate if pixel falls in any special lighting areas (highlight, shadow, edge)
	vec3 highlight = vec3(getHighlight(texcoord, layer));
	vec3 shadow =  vec3(getShadow(texcoord, layer));
	vec3 outline = vec3(getLayerOutline(texcoord, layer));
	
	//apply any calculated special lighting conditions.
	layer_col *= highlight;
	layer_col *= shadow;
	
	layer_col = (dot(layer_col, vec3(1.0)) == 0.0) ? vec3(0.05) : layer_col;

	//apply outline effect
	layer_col *= outline;
	
	//apply paper grain texture
	vec3 grain = vec3(noise2D(((uv + layer) * texdim.y / 1.0 + 1.7 + layer)) - noise2D(vec2(uv * texdim.y / 1.0 + 3.4 + layer)));
	layer_col *= 0.5 + 0.07 * grain.xyz + 0.07 * dot(grain, vec3(0.299, 0.587, 0.9));
	
	//output fragment with some rough gamma correction
	gl_FragColor = vec4(sqrt(max(layer_col, 0.)), 1.0);
	
}
]]>
		</program>
	</language>
</jittershader>
