<jittershader name="default">
	<description> Default Slab </description>
	<param name="seed" type="float" default="3.14159" />
	<param name="itime" type="float" default="0.0" />
	<param name="scale" type="vec2" default="25.0, 25.0" />
	<param name="edge_width" type="float" default="0.0" />
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="1.0">
		<bind param="seed" program="fp" />
		<bind param="itime" program="fp" />
		<bind param="scale" program="fp" />
		<bind param="edge_width" program="fp" />
		<bind param="tex0" program="fp" />		
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord;
varying vec2 texdim;
void main (void)
{
    gl_Position = ftransform();
    texcoord    = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	texdim		= vec2(abs(gl_TextureMatrix[0][0][0]), abs(gl_TextureMatrix[0][1][1]));
}
]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[
varying vec2 texcoord;
varying vec2 texdim;
uniform sampler2DRect tex0;
uniform float seed;
uniform float itime;
uniform float edge_width;
uniform vec2 scale;


//based on examples from https://thebookofshaders.com/12/?lan=en

//"random" cell centerpoint distance
vec2 hashCell(vec2 duv, float t, float s) {
	
	vec2 p = fract(sin(vec2(dot((duv + 1.0) - (scale / 2.0) * 10.0 ,vec2(1043.42,311.7)),dot((duv + 1.0) - (scale / 2.0) * 10.0,vec2(559.9,183.3))))) * 43758.5453;
	
	//get the position of the center in the rectangular cell
	vec2 pcent = (sin(p + t) * vec2(0.5)) + vec2(0.5) + duv;

	return pcent;
}

//function to find the the minimum distance center
vec2 getClosest(vec2 a, vec2 b, vec2 uv){
	return (length(a - uv.xy) < length(b - uv.xy)) ? a : b;
}

float onBoundary(vec2 a, vec2 b, vec2 c, vec2 d, vec2 e, vec2 f, vec2 g, vec2 h, vec2 i, float t, vec2 uv) {
	
	float min = 99999.0;
	float overlap = 0.0;
	float al = length(a - uv);
	min = (al < min) ? al : min;
		float bl = length(b - uv);
	min = (bl < min) ? bl : min;
		float cl = length(c - uv);
	min = (cl < min) ? cl : min;
		float dl = length(d - uv);
	min = (dl < min) ? dl : min;
		float el = length(e - uv);
	min = (el < min) ? el : min;
		float fl = length(f - uv);
	min = (fl < min) ? fl : min;
		float gl = length(g - uv);
	min = (gl < min) ? gl : min;
		float hl = length(h - uv);
	min = (hl < min) ? hl : min;
		float il = length(i - uv);
	min = (il < min) ? il : min;

	overlap = min(abs((al != min) ? al - min : 99999.0), min(abs(bl - min), min(abs(cl - min), min(abs(dl - min), min(abs(el - min), min(abs(fl - min), min(abs(gl - min), min(abs(hl - min), abs(il - min))))))))); 

	return overlap;
}

void main(void) 
{
	//get the normalized pixel position
	vec2 uv = texcoord.xy / texdim.xy;
	//get the tile within the cell noise pattern that contains the pixel
	vec2 duv = floor(uv * scale);
	vec2 tuv = uv * scale;
	
	//find the nearest cell center to the pixel (may not be the containing cell)
	
	//create the offset vector
	vec2 offset = vec2(-1.0, -1.0);
	
	//Row 1
	vec2 hashA = hashCell(duv + offset, itime, seed);
	offset += vec2(1.0, 0.0);
	vec2 hashB = hashCell(duv + offset, itime, seed);
	offset += vec2(1.0, 0.0);
	vec2 hashC = hashCell(duv + offset, itime, seed);
	
	//Row 2
	offset = vec2(-1.0, 0.0);
	vec2 hashD = hashCell(duv + offset, itime, seed);
	offset += vec2(1.0, 0.0);
	vec2 hashE = hashCell(duv + offset, itime, seed);
	offset += vec2(1.0, 0.0);
	vec2 hashF = hashCell(duv + offset, itime, seed);
	
	//Row 3
	offset = vec2(-1.0, 1.0);
	vec2 hashG = hashCell(duv + offset, itime, seed);
	offset += vec2(1.0, 0.0);
	vec2 hashH = hashCell(duv + offset, itime, seed);
	offset += vec2(1.0, 0.0);
	vec2 hashI = hashCell(duv + offset, itime, seed);
	
	//check to find the closest center to the pixel position
	vec2 center = getClosest(hashA, hashB, tuv);
	center = getClosest(center, hashC, tuv);
	center = getClosest(center, hashD, tuv);
	center = getClosest(center, hashE, tuv);
	center = getClosest(center, hashF, tuv);
	center = getClosest(center, hashG, tuv);
	center = getClosest(center, hashH, tuv);
	center = getClosest(center, hashI, tuv);
	
	center = center / scale;
	

	float border = onBoundary(hashA,hashB,hashC,hashD,hashE,hashF,hashG,hashH,hashI,edge_width,tuv);
	//border = 1.0 - border;
	vec4 color = vec4(border);
	color = (length(tuv - hashE) < 0.01) ? vec4(1.0) : color;
	vec4 color2 = texture2DRect(tex0, center * texdim.xy);

	
	//draw the color from the input texture at that center position
	gl_FragColor = color; //color2;
	//gl_FragColor = vec4(hashA.x, hashA.y, 0.0, 1.0);//t
	//gl_FragColor = color;
}
]]>
		</program>
	</language>
</jittershader>
