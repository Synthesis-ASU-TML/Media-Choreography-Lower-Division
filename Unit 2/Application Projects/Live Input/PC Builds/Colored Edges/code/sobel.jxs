<jittershader name="edge glow">
	<param name="tex0" type="int" default="0" />
	<param name="time" type="float" default="0.0" />
	<language name="glsl" version="1.2">
		<bind param="tex0" program="fp" />
		<bind param="time" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[

#version 120

varying vec2 texcoord0;

void main(void) {
	
	gl_Position = ftransform();
	
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

#version 120

varying vec2 texcoord0;

uniform float time;
uniform sampler2DRect tex0;

float lookup(vec2 p, vec2 d, float off) {
	//combine center with delta
	vec2 uv = p + vec2(d.x * off, d.y * off);
	vec4 c = texture2DRect(tex0, uv);
	
	float luma = 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;
	
	return luma;
}

void main(void) {
	
	float off =sin(time * 5.0) * 0.5 + 1.5; //kernel offset
	
	//simple sobel edge detection
	float gx = 0.0; //init
	
	gx += -1.0 * lookup(texcoord0, vec2(-1.0, -1.0), off);
	gx += -2.0 * lookup(texcoord0, vec2(-1.0,  0.0), off);
	gx += -1.0 * lookup(texcoord0, vec2(-1.0,  1.0), off);
	gx +=  1.0 * lookup(texcoord0, vec2( 1.0, -1.0), off);
	gx +=  2.0 * lookup(texcoord0, vec2( 1.0,  0.0), off);
	gx +=  1.0 * lookup(texcoord0, vec2( 1.0,  1.0), off);
		
	float gy = 0.0;
	
	gy += -1.0 * lookup(texcoord0, vec2(-1.0, -1.0), off);
	gy += -2.0 * lookup(texcoord0, vec2( 0.0, -1.0), off);
	gy += -1.0 * lookup(texcoord0, vec2( 1.0, -1.0), off);
	gy +=  1.0 * lookup(texcoord0, vec2(-1.0,  1.0), off);
	gy +=  2.0 * lookup(texcoord0, vec2( 0.0,  1.0), off);
	gy +=  1.0 * lookup(texcoord0, vec2( 1.0,  1.0), off);
	
	float g = gx * gx + gy * gy; //squared gradient for noise reduction
	
	vec4 pColor = vec4(g);
	
	gl_FragColor = pColor;
}

]]>
		</program>
	</language>
</jittershader>